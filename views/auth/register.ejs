<!-- views/register.ejs -->
<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Criar Conta - Go4It</title>
  <link rel="stylesheet" href="/public/css/register.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
  <div class="register-container">
    <!-- Logo Section -->
    <div class="register-logo">
      <i class="fas fa-rocket logo-icon"></i>
      <h1 class="logo-title">Go4It</h1>
      <p class="logo-subtitle">Crie sua conta</p>
    </div>

    <!-- Error Message (if any) -->
    <% if (locals.erro) { %>
      <div class="error-message">
        <i class="fas fa-exclamation-circle"></i>
        <%= erro %>
      </div>
    <% } %>

    <!-- Success Message (if any) -->
    <% if (locals.success) { %>
      <div class="success-message">
        <i class="fas fa-check-circle"></i>
        <%= success %>
      </div>
    <% } %>

    <!-- Registration Form -->
    <form class="register-form" action="/auth/register" method="POST">
      <div class="form-group <%= locals.erro && locals.erro.includes('nome') ? 'error' : '' %>">
        <label for="nome" class="form-label">Nome Completo</label>
        <input 
          type="text" 
          id="nome" 
          name="nome" 
          class="form-input" 
          placeholder="Digite seu nome completo"
          required
          autocomplete="name"
          value="<%= locals.nome || '' %>"
        >
        <% if (locals.erro && locals.erro.includes('nome')) { %>
          <div class="validation-message error">
            <i class="fas fa-exclamation-circle"></i>
            Nome é obrigatório
          </div>
        <% } %>
      </div>

      <div class="form-group <%= locals.erro && locals.erro.includes('email') ? 'error' : '' %>">
        <label for="email" class="form-label">E-mail Institucional</label>
        <input 
          type="email" 
          id="email" 
          name="email" 
          class="form-input" 
          placeholder="seu@email.com"
          required
          autocomplete="email"
          value="<%= locals.email || '' %>"
        >
        <% if (locals.erro && locals.erro.includes('email')) { %>
          <div class="validation-message error">
            <i class="fas fa-exclamation-circle"></i>
            Este e-mail já está cadastrado
          </div>
        <% } %>
      </div>

      <div class="form-group <%= locals.erro && locals.erro.includes('tipo') ? 'error' : '' %>">
        <label for="tipo" class="form-label">Tipo de Usuário</label>
        <select 
          id="tipo" 
          name="tipo" 
          class="form-select" 
          required
        >
          <option value="">Selecione seu tipo...</option>
          <option value="aluno" <%= locals.tipo === 'aluno' ? 'selected' : '' %>>Aluno</option>
          <option value="professor" <%= locals.tipo === 'professor' ? 'selected' : '' %>>Professor</option>
          <option value="empresa" <%= locals.tipo === 'empresa' ? 'selected' : '' %>>Empresa</option>
          <option value="admin" <%= locals.tipo === 'admin' ? 'selected' : '' %>>Administrador</option>
        </select>
        <% if (locals.erro && locals.erro.includes('tipo')) { %>
          <div class="validation-message error">
            <i class="fas fa-exclamation-circle"></i>
            Selecione um tipo de usuário
          </div>
        <% } %>
      </div>

      <div class="form-group <%= locals.erro && locals.erro.includes('senha') ? 'error' : '' %>">
        <label for="senha" class="form-label">Senha</label>
        <input 
          type="password" 
          id="senha" 
          name="senha" 
          class="form-input" 
          placeholder="Digite sua senha"
          required
          autocomplete="new-password"
          minlength="8"
        >
        
        <!-- Password Strength Indicator -->
        <div class="password-strength" id="passwordStrength" style="display: none;">
          <div class="strength-bar">
            <div class="strength-fill" id="strengthFill"></div>
          </div>
          <span class="strength-text" id="strengthText"></span>
        </div>
        
        <% if (locals.erro && locals.erro.includes('senha')) { %>
          <div class="validation-message error">
            <i class="fas fa-exclamation-circle"></i>
            Senha deve ter pelo menos 8 caracteres
          </div>
        <% } %>
      </div>

      <button type="submit" class="register-btn">
        <span class="btn-text">Criar Conta</span>
      </button>
    </form>

    <!-- Links Section -->
    <div class="register-links">
      <a href="/auth/login" class="register-link login">
        Já tem uma conta?
      </a>
      <span class="register-divider">•</span>
      <a href="/auth/login" class="register-link">
        Fazer login
      </a>
    </div>
  </div>

  <!-- JavaScript for form handling -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.querySelector('.register-form');
      const submitBtn = document.querySelector('.register-btn');
      const btnText = document.querySelector('.btn-text');
      const passwordInput = document.getElementById('senha');
      const passwordStrength = document.getElementById('passwordStrength');
      const strengthFill = document.getElementById('strengthFill');
      const strengthText = document.getElementById('strengthText');
      
      // Password strength checker
      function checkPasswordStrength(password) {
        let strength = 0;
        const feedback = [];
        
        if (password.length >= 8) {
          strength++;
          feedback.push('8+ caracteres');
        }
        if (/[A-Z]/.test(password)) {
          strength++;
          feedback.push('maiúscula');
        }
        if (/[a-z]/.test(password)) {
          strength++;
          feedback.push('minúscula');
        }
        if (/[0-9]/.test(password)) {
          strength++;
          feedback.push('número');
        }
        if (/[^A-Za-z0-9]/.test(password)) {
          strength++;
          feedback.push('símbolo');
        }
        
        return { strength, feedback };
      }
      
      // Update password strength indicator
      function updatePasswordStrength() {
        const password = passwordInput.value;
        
        if (password.length === 0) {
          passwordStrength.style.display = 'none';
          return;
        }
        
        passwordStrength.style.display = 'flex';
        const { strength, feedback } = checkPasswordStrength(password);
        
        // Remove all classes
        strengthFill.className = 'strength-fill';
        strengthText.className = 'strength-text';
        
        // Add appropriate classes based on strength
        if (strength <= 2) {
          strengthFill.classList.add('weak');
          strengthText.classList.add('weak');
          strengthText.textContent = 'Fraca';
        } else if (strength === 3) {
          strengthFill.classList.add('medium');
          strengthText.classList.add('medium');
          strengthText.textContent = 'Média';
        } else if (strength === 4) {
          strengthFill.classList.add('strong');
          strengthText.classList.add('strong');
          strengthText.textContent = 'Forte';
        } else {
          strengthFill.classList.add('very-strong');
          strengthText.classList.add('very-strong');
          strengthText.textContent = 'Muito forte';
        }
      }
      
      // Password input event listener
      passwordInput.addEventListener('input', updatePasswordStrength);
      
      // Form submission handling
      form.addEventListener('submit', function(e) {
        // Basic validation
        const password = passwordInput.value;
        const { strength } = checkPasswordStrength(password);
        
        if (strength < 3) {
          e.preventDefault();
          alert('Sua senha deve ser pelo menos média. Adicione mais caracteres, números ou símbolos.');
          return;
        }
        
        // Add loading state
        submitBtn.classList.add('loading');
        btnText.textContent = 'Criando conta...';
        submitBtn.disabled = true;
        
        // Remove loading state after 3 seconds (fallback)
        setTimeout(() => {
          submitBtn.classList.remove('loading');
          btnText.textContent = 'Criar Conta';
          submitBtn.disabled = false;
        }, 3000);
      });
      
      // Input focus effects
      const inputs = document.querySelectorAll('.form-input, .form-select');
      inputs.forEach(input => {
        input.addEventListener('focus', function() {
          this.parentElement.classList.add('focused');
        });
        
        input.addEventListener('blur', function() {
          this.parentElement.classList.remove('focused');
        });
        
        // Remove error class on input
        input.addEventListener('input', function() {
          this.classList.remove('error');
          this.parentElement.classList.remove('error');
        });
      });
      
      // Auto-hide error messages after 5 seconds
      const errorMessage = document.querySelector('.error-message');
      if (errorMessage) {
        setTimeout(() => {
          errorMessage.style.opacity = '0';
          setTimeout(() => {
            errorMessage.style.display = 'none';
          }, 300);
        }, 5000);
      }
      
      // Real-time validation
      const emailInput = document.getElementById('email');
      emailInput.addEventListener('blur', function() {
        const email = this.value;
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        
        if (email && !emailRegex.test(email)) {
          this.classList.add('error');
          this.parentElement.classList.add('error');
        }
      });
    });
  </script>
</body>
</html>
